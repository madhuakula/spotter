apiVersion: rules.spotter.run/v1
kind: SecurityRule
metadata:
  name: secrets-as-environment-variables
  labels:
    category: "Secrets & Data Protection"
    severity: high
spec:
  id: SPOTTER-SECRETS-DATA-PROTECTION-002
  name: "Secret Exposed as Environment Variable"
  version: "1.0.0"
  description: "Exposing secrets as environment variables can be risky, as they can be easily exposed through logs or other means."
  severity:
    level: HIGH
    score: 7.8
  category: "Secrets & Data Protection"
  subcategory: "Secret Management"
  cwe: "CWE-522"
  regulatoryStandards:
    - name: "NIST SP 800-53"
      reference: "https://csrc.nist.gov/publications/detail/sp/800-53/rev-5/final"
      section: "SC-28"
  match:
    resources:
      kubernetes:
        apiGroups:
          - ""
          - "apps"
        versions:
          - "v1"
        kinds:
          - Pod
          - Deployment
          - StatefulSet
          - DaemonSet
          - Job
        namespaces:
          include: ["*"]
          exclude: ["kube-system", "kube-public"]
  cel: |
    (object.kind == 'Pod' && has(object.spec.containers) && object.spec.containers.exists(c, 
      (has(c.env) && c.env.exists(e, has(e.valueFrom) && has(e.valueFrom.secretKeyRef))) ||
      (has(c.envFrom) && c.envFrom.exists(ef, has(ef.secretRef)))
    )) ||
    (object.kind != 'Pod' && has(object.spec.template.spec.containers) && object.spec.template.spec.containers.exists(c, 
      (has(c.env) && c.env.exists(e, has(e.valueFrom) && has(e.valueFrom.secretKeyRef))) ||
      (has(c.envFrom) && c.envFrom.exists(ef, has(ef.secretRef)))
    ))
  remediation:
    manual: "Use a volume to mount the secret into the pod instead of exposing it as an environment variable."
  references:
    - title: "Kubernetes Secrets"
      url: "https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod"
  metadata:
    author: "Spotter Security Team"
    created: "2024-07-29"
